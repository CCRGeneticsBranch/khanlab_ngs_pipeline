############
#       STAR
############
rule STAR_TPM:
	input:  R=lambda wildcards: FQ[wildcards.sample],
		R1="{subject}/{TIME}/FQ/{sample}_R1.fastq.gz",
        	R2="{subject}/{TIME}/FQ/{sample}_R2.fastq.gz",
	output:
		temp("{subject}/{TIME}/{sample}/{sample}.star_UCSC.bam"),
		temp("{subject}/{TIME}/{sample}/{sample}.star_UCSC.bam.bai")
	version: config["STAR"]
	params:
		rulename  = "STAR",
		batch     = config[config['host']]['job_STAR_TPM'],
		star_ref  = config['STAR_2.5.3a'],
		home      = WORK_DIR,
	shell: """
	#######################
	module load STAR/{version} samtools
	cd ${{LOCAL}}/
	# running two pass mapping
	STAR 	--outTmpDir twopass\
		--genomeDir {params.star_ref} \
                --readFilesIn {input.R[0]} {input.R[1]} \
		--readFilesCommand zcat\
                --outSAMtype BAM SortedByCoordinate\
		--twopassMode Basic \
		--outFileNamePrefix {wildcards.sample}_ucsc \
		--runThreadN ${{THREADS}} \
		--outFilterMismatchNmax 2\
		--outSAMunmapped Within\
	echo "Finished STAR twopass mapping"
	mv -f {wildcards.sample}_ucscAligned.sortedByCoord.out.bam {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.star_UCSC.bam
	samtools index {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.star_UCSC.bam
	#######################
	"""

##################
# STAR_Fusion
##################
#rule STAR_Fusion:
#	input:
#		Junction="{subject}/{TIME}/{sample}/{sample}_ucscChimeric.out.junction",
#	output:
#		"{subject}/{TIME}/{sample}/STAR-Fusion_results/star-fusion.fusion_predictions.tsv",
#		"{subject}/{TIME}/{sample}/fusion/STAR-fusion.txt",
#	version: config["STAR-Fusion"],
#	params:
#		rulename   = "STAR_Fusion",
#		samtools   = config['samtools'],
#		batch      = config[config['host']]['job_STAR_TPM'],
#		SF_ref	   = config['STAR_Fusion'],
#		home	  = WORK_DIR,
#	shell: """
#	#########################
#	module load STAR-Fusion/{version}
#	module load samtools/{params.samtools}
#	module load perl
#	STAR-Fusion --genome_lib_dir {params.SF_ref} -J {input.Junction} --CPU ${{THREADS}} --output_dir {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results
#	
#	cp  {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/star-fusion.fusion_predictions.tsv {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/fusion/STAR-fusion.txt
#
#	###########################
#       """

##################
# STAR_Fusion
##################
rule STAR_Fusion:
        input:  R=lambda wildcards: FQ[wildcards.sample],
                R1="{subject}/{TIME}/FQ/{sample}_R1.fastq.gz",
                R2="{subject}/{TIME}/FQ/{sample}_R2.fastq.gz",
              	
        output:
               	"{subject}/{TIME}/{sample}/STAR-Fusion_results/star-fusion.fusion_predictions.tsv",
                "{subject}/{TIME}/{sample}/fusion/STAR-fusion.txt",
        version: config["STAR-Fusion"],
        params:
               	rulename   = "STAR_Fusion",
                samtools   = config['samtools'],
                batch	   = config[config['host']]['job_STAR_TPM'],
                SF_ref     = config['STAR_Fusion'],
	       	STAR	   = config["STAR"],        
		home	  = WORK_DIR,
        shell: """
        #########################
        module load STAR-Fusion/{version}
        module load samtools/{params.samtools}
        module load perl
	module load STAR/{params.STAR}
        STAR-Fusion --genome_lib_dir {params.SF_ref} --left_fq {input.R[0]} --right_fq {input.R[1]} --CPU ${{THREADS}} --output_dir {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results
# STAR-fusion runs STAR innately with these parameters --outReadsUnmapped None  --chimSegmentMin 12  --chimJunctionOverhangMin 12 
#  --alignSJDBoverhangMin 10  --alignMatesGapMax 100000  --alignIntronMax 100000  --alignSJstitchMismatchNmax 5 -1 5 5  --runThreadN 10 --outSAMstrandField
#  intronMotif  --outSAMunmapped Within  --outSAMtype BAM Unsorted  --outSAMattrRGline ID:GRPundef  --chimSegmentReadGapMax 3 --twopassMode Basic 
        cp  {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/star-fusion.fusion_predictions.tsv {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/fusion/STAR-fusion.txt
	# remove intermediate files
	rm {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/std.Chimeric.out.sam	
	rm {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/std.STAR.bam
	rm -rf {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/star-fusion.preliminary

        ###########################
        """

###################
# Picard_bam
###################
rule Picard_bam:
	input:
		bam="{base}/{TIME}/{sample}/{sample}.star_UCSC.bam",
		bai="{base}/{TIME}/{sample}/{sample}.star_UCSC.bam.bai"
	output:
		temp("{base}/{TIME}/{sample}/{sample}.ucsc.star.bam"),
		temp("{base}/{TIME}/{sample}/{sample}.ucsc.star.bam.bai")
	version: config["picard"]
	params:	
		rulename = "Picard_bam",
		samtools = config['samtools'],
		batch     = config[config['host']]['job_STAR'],
		home	  = WORK_DIR,
	shell: """
	###########################
	module load picard/{version}
	java -Xmx${{MEM}}g -Djava.io.tmpdir=${{LOCAL}} -jar $PICARD_JAR AddOrReplaceReadGroups\
	VALIDATION_STRINGENCY=SILENT\
	INPUT={input.bam}\
	OUTPUT={params.home}/{wildcards.base}/{TIME}/{wildcards.sample}/{wildcards.sample}.ucsc.star.bam\
	SORT_ORDER=coordinate RGLB={wildcards.sample} RGPU={wildcards.sample} RGPL=ILLUMINA RGSM={wildcards.sample} RGCN=khanlab
	
	module load samtools/{params.samtools}	
	samtools index {params.home}/{wildcards.base}/{TIME}/{wildcards.sample}/{wildcards.sample}.ucsc.star.bam
	###########################
	"""


##################
# RNASeQC_star
##################
rule RNASeQC_star:
	input:
		bam="{base}/{TIME}/{sample}/{sample}.ucsc.star.dd.bam",
		bai="{base}/{TIME}/{sample}/{sample}.ucsc.star.dd.bam.bai",
		rna_interval=config['rRNA_interval_star'],
		gtf=config["UCSC_star"],
		ref=config["reference"]	,	
	output: "{base}/{TIME}/{sample}/qc/rnaseqc/report.html"
	version: config["rnaseqc"],
	params:
		rulename="RNAseQC_star",
		R	=config['version_R'],
		picard	=config["picard"],
		batch	= config[config['host']]["job_STAR"],
		home	  = WORK_DIR,
	shell: """
	###########################
	module load rnaseqc/{version}
	module load  picard/{params.picard}
	module load R/{params.R}
	java -Xmx${{MEM}}g  -Djava.io.tmpdir=${{LOCAL}} -jar $RNASEQCPATH/RNA-SeQC_v1.1.8.jar   -r {input.ref} -rRNA {input.rna_interval} -o {wildcards.base}/{TIME}/{wildcards.sample}/qc/rnaseqc  -s "{wildcards.sample}|{input.bam}|{wildcards.sample}" -t {input.gtf}	
	###########################
	"""	

############
# featureCounts
#############
rule FeatureCounts:
	input:
		bam="{base}/{TIME}/{sample}/{sample}.star_UCSC.bam",
		ref=lambda wildcards: config['GTF'][wildcards.gtf],
		script=NGS_PIPELINE + "/scripts/featureCounts.v2.R",
		trasncriptRDS=lambda wildcards: config['RDS'][wildcards.gtf],
		geneRDS=lambda wildcards: config['RDS'][wildcards.gtf].replace('transcript', 'gene'),
		exonRDS=lambda wildcards: config['RDS'][wildcards.gtf].replace('transcript', 'exon'),
	output:
		"{base}/{TIME}/{sample}/TPM_{gtf}/{sample}.transcript.TPM.txt",
		"{base}/{TIME}/{sample}/TPM_{gtf}/{sample}.gene.TPM.txt",
		"{base}/{TIME}/{sample}/TPM_{gtf}/{sample}.exon.TPM.txt",
	version: config['version_R']
	params:
		rulename   = "featureCounts",
		batch      =config[config['host']]['job_featCount'],
		work_dir =  WORK_DIR
	shell: """
	#######################
	module load R/{version}
	cd ${{LOCAL}}
	{input.script} --nt ${{THREADS}} --lib="{wildcards.sample}" --targetFile="{params.work_dir}/{input.bam}" --referenceGTF="{input.ref}" --featureType="transcript" --resultOut="{params.work_dir}/{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/TPM_{wildcards.gtf}/" --annotationRDS={input.trasncriptRDS}
	{input.script} --nt ${{THREADS}} --lib="{wildcards.sample}" --targetFile="{params.work_dir}/{input.bam}" --referenceGTF="{input.ref}" --featureType="gene" --resultOut="{params.work_dir}/{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/TPM_{wildcards.gtf}/" --annotationRDS={input.geneRDS}
	{input.script} --nt ${{THREADS}} --lib="{wildcards.sample}" --targetFile="{params.work_dir}/{input.bam}" --referenceGTF="{input.ref}" --featureType="exon" --resultOut="{params.work_dir}/{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/TPM_{wildcards.gtf}/" --annotationRDS={input.exonRDS}
	#######################
	"""
