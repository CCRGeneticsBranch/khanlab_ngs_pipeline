
##################
# RNASeQC_star
##################
rule RNASeQC_star:
	input:
		bam="{base}/{TIME}/{sample}/{sample}.star.dd.bam",
		bai="{base}/{TIME}/{sample}/{sample}.star.dd.bam.bai",
		rna_interval=config['rRNA_interval_star'],
		gtf=config["rnaseqc_star"],
		ref=config["reference"]	,	
	output: "{base}/{TIME}/{sample}/qc/rnaseqc/report.html"
	envmodules: config["rnaseqc"],
		config["picard"],
		config['version_R']		
	params:
		rulename="RNASeQC_star",
#		R	=config['version_R'],
#		picard	=config["picard"],
		batch	= config[config['host']]["job_STAR"],
		home	  = WORK_DIR,
	shell: """
	###########################
	if [ -d "{params.home}/{wildcards.base}/{TIME}/{wildcards.sample}/qc/rnaseqc" ]; then rm -Rf {params.home}/{wildcards.base}/{TIME}/{wildcards.sample}/qc/rnaseqc; fi
	java -Xmx${{MEM}}g  -Djava.io.tmpdir=${{LOCAL}} -jar $RNASEQCPATH/RNA-SeQC_v1.1.8.jar   -r {input.ref} -rRNA {input.rna_interval} -o {wildcards.base}/{TIME}/{wildcards.sample}/qc/rnaseqc  -s "{wildcards.sample}|{input.bam}|{wildcards.sample}" -t {input.gtf}	
	###########################
	"""	



##############
#STAR-ENS
################
rule STARens:
	input:	R=lambda wildcards: FQ[wildcards.sample],
		R1="{subject}/{TIME}/FQ/{sample}_R1.fastq.gz",
		R2="{subject}/{TIME}/FQ/{sample}_R2.fastq.gz",
	output:
		temp("{subject}/{TIME}/{sample}/{sample}.star.bam"),
		temp("{subject}/{TIME}/{sample}/{sample}.star.bam.bai"),
		"{subject}/{TIME}/{sample}/{sample}Chimeric.out.junction",
		"{subject}/{TIME}/{sample}/{sample}_ENS_SJ.out.tab.bed.gz",
		temp("{subject}/{TIME}/{sample}/{sample}.ENS_transcriptome.bam"),
	envmodules:
		config["STAR"],
		config['bedtools'],
		config['picard'],
		config['samtools'],
		config['bcftools']
	params:
		rulename = "STARens",
		batch    = config[config['host']]['job_STAR_TPM'],
		star_ens_ref  = config['star_2.5.3a_ens'],
		home     = WORK_DIR,
	shell: 
		"""
		#########################################
		# set LOCAL
		cd ${{LOCAL}}/

		# set tmp dir		
		if [[ -d "/lscratch/$SLURM_JOB_ID" ]]; then 
			TMPDIR="/lscratch/$SLURM_JOB_ID"
		else
			TMPDIR=tmp/star_tmp
			if [[ ! -d $TMPDIR ]]; then mkdir -p $TMPDIR; fi
		fi

		# Run STAR
		STAR	--genomeDir {params.star_ens_ref} \
		--readFilesIn {input.R[0]} {input.R[1]} \
		--readFilesCommand zcat \
		--outFileNamePrefix $TMPDIR/{wildcards.sample}_ENS \
		--runThreadN ${{THREADS}} \
		--twopassMode Basic \
		--outSAMunmapped Within \
		--chimSegmentMin 12  \
		--chimJunctionOverhangMin 12 \
		--alignSJDBoverhangMin 10  \
		--alignMatesGapMax 100000  \
		--alignIntronMax 100000  \
		--chimSegmentReadGapMax 3 \
		--outFilterMismatchNmax 2 \
		--outSAMtype BAM Unsorted \
		--quantMode TranscriptomeSAM

		echo "STAR ENS mapping completed"
		
		# sort file
		samtools sort -m 150G -T $TMPDIR $TMPDIR/{wildcards.sample}_ENSAligned.out.bam -o $TMPDIR/{wildcards.sample}_ENSAligned.sortedByCoord.out.bam

		# MOVE JUNCTIONS FILE
		mv -f $TMPDIR/{wildcards.sample}_ENSChimeric.out.junction {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}Chimeric.out.junction

		# MOVE TRANSCRIPTOME BAM
		mv -f $TMPDIR/{wildcards.sample}_ENSAligned.toTranscriptome.out.bam {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.ENS_transcriptome.bam

		#MOVE TAB
		mv -f $TMPDIR/{wildcards.sample}_ENSSJ.out.tab {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}_ENS_SJ.out.tab

		# RUN PICARD
		java -Xmx75g -Djava.io.tmpdir=$TMPDIR -jar $PICARD_JAR AddOrReplaceReadGroups VALIDATION_STRINGENCY=SILENT INPUT=$TMPDIR/{wildcards.sample}_ENSAligned.sortedByCoord.out.bam OUTPUT={params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.star.bam SORT_ORDER=coordinate RGLB={wildcards.sample} RGPU={wildcards.sample} RGPL=ILLUMINA RGSM={wildcards.sample} RGCN=khanlab
		
		# index
		samtools index {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}.star.bam

		# filt tabix
		awk -F"\\t" 'BEGIN{{OFS="\\t"}}{{strand=($4==1)?"+":"-";annotated=($6==1)?"true":"false";if($5==0) motif="non-canonical"; if($5==1)motif="GT/AG";if($5==2)motif="CT/AC";if($5==3)motif="GC/AC";if($5==4)motif="CT/GC";if($5==5)motif="AT/AC";if($5==6)motif="GT/AT";print $1,$2,$3,"motif="motif";uniquely_mapped="$7";multi_mapped="$8";maximum_spliced_alignment_overhang="$9";annotated_junction="annotated,$7,strand}}' {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}_ENS_SJ.out.tab |bedtools sort |bgzip > {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}_ENS_SJ.out.tab.bed.gz
		tabix -0 -p bed {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/{wildcards.sample}_ENS_SJ.out.tab.bed.gz
		##########################################
		"""

######################
# STAR_Fusion
######################
rule STAR_Fusion:
	input:
		Junction="{subject}/{TIME}/{sample}/{sample}Chimeric.out.junction",
	output:
		"{subject}/{TIME}/{sample}/STAR-Fusion_results/star-fusion.fusion_predictions.tsv",
		"{subject}/{TIME}/{sample}/fusion/STAR-fusion.txt",
	envmodules:
		config["STAR-Fusion"],
		config["STAR"],
		config['samtools'],
		"perl"
	params:
		rulename   =  "STAR_Fusion",
#		samtools   =  config['samtools'],
		batch	   = config[config['host']]['job_STAR_TPM'],
		SF_ref     = config['STAR_Fusion_ENS'],
#		STAR	   = config["STAR"],
		home	   = WORK_DIR,
	shell: """
	##########################
	if [ -d "{params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results" ]; then rm -Rf {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results; fi
	STAR-Fusion --genome_lib_dir {params.SF_ref} -J {params.home}/{input.Junction} --CPU ${{THREADS}} --output_dir {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results
	cp {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/star-fusion.fusion_predictions.tsv {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/fusion/STAR-fusion.txt
	# remove intermediate files
	rm -rf {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/STAR-Fusion_results/star-fusion.preliminary
	
	##########################
	"""

########################
# RSEM-ENS
########################
rule RSEMens:
	input:
		bam="{subject}/{TIME}/{sample}/{sample}.ENS_transcriptome.bam",
	output:
		"{subject}/{TIME}/{sample}/RSEM_ENS/{sample}.rsem_ENS.genes.results",
		"{subject}/{TIME}/{sample}/RSEM_ENS/{sample}.rsem_ENS.isoforms.results",
	envmodules:
		config["rsem"],
	params:
		rulename = "RSEMens",
		ref      = config['rsem_ens_ref'],
		batch    = config[config['host']]['job_STAR'],
		home     = WORK_DIR,
	shell: """
	################################
	cd ${{LOCAL}}/
	rsem-calculate-expression --no-bam-output --paired-end -p ${{THREADS}}  --estimate-rspd  --bam {params.home}/{input.bam} {params.ref} {wildcards.sample}_ENS
	echo "gene and transcript level counts generated"
	mkdir -p {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/RSEM_ENS
	mv -f {wildcards.sample}_ENS.genes.results {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/RSEM_ENS/{wildcards.sample}.rsem_ENS.genes.results
	mv -f {wildcards.sample}_ENS.isoforms.results {params.home}/{wildcards.subject}/{TIME}/{wildcards.sample}/RSEM_ENS/{wildcards.sample}.rsem_ENS.isoforms.results
	################################
	"""
